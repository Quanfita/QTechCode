"""
Django settings for QTECHCODE project.

Generated by 'django-admin startproject' using Django 1.10.6.

For more information on this file, see
https://docs.djangoproject.com/en/1.10/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/1.10/ref/settings/
"""

import os
import sys

# 导入网站个人信息，非通用信息

# Build paths inside the project like this: os.path.join(BASE_DIR, ...)
BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))

# 添加 apps 目录
sys.path.insert(0, os.path.join(BASE_DIR, 'apps'))

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/1.10/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = os.getenv('QTECHCODE_SECRET_KEY', '')

# 是否开启[在线工具]应用
TOOL_FLAG = os.getenv('QTECHCODE_TOOL_FLAG', 'True').upper() == 'TRUE'
# 是否开启[API]应用
API_FLAG = os.getenv('QTECHCODE_API_FLAG', 'True').upper() == 'TRUE'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = os.getenv('QTECHCODE_DEBUG', 'True').upper() == 'TRUE'

STORE_FLAG = os.getenv('QTECHCODE_STORE_FLAG', 'True').upper() == 'TRUE'

RESOURCE_FLAG = os.getenv('QTECHCODE_RESOURCE_FLAG', 'True').upper() == 'TRUE'

ALLOWED_HOSTS = ['127.0.0.1','quanfita.cn','localhost']

CELERY_BROKER_URL = 'redis://127.0.0.1:6379/0' # Broker配置，使用Redis作为消息中间件

CELERY_RESULT_BACKEND = 'redis://127.0.0.1:6379/0' # BACKEND配置，这里使用redis

CELERY_RESULT_SERIALIZER = 'json' # 结果序列化方案

CELERY_RESULT_BACKEND = 'django-db'

CELERY_BEAT_SCHEDULER = 'django_celery_beat.schedulers:DatabaseScheduler'

CELERY_TIMEZONE='Asia/Shanghai'

CELERY_ENABLE_UTC=True

# Application definition

# 添加了新的app需要重启服务器
INSTALLED_APPS = [
    'bootstrap_admin',  # 注册bootstrap后台管理界面,这个必须放在最前面

    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'django.contrib.humanize',  # 添加人性化过滤器
    'django.contrib.sitemaps',  # 网站地图
    #'django_celery_results',
    #'django_celery_beat',

    'oauth',  # 自定义用户应用
    # allauth需要注册的应用
    'django.contrib.sites',  # 这个是自带的，会创建一个sites表，用来存放域名
    'allauth',
    'allauth.account',
    'allauth.socialaccount',
    'allauth.socialaccount.providers.weibo',
    'allauth.socialaccount.providers.github',

    'rest_framework',

    'crispy_forms',  # bootstrap表单样式
    'imagekit',  # 上传图片的应用

    'haystack',  # 全文搜索应用 这个要放在其他应用之前
    'blog',  # 博客应用
    'tool',  # 工具
    'comment',  # 评论
    'django_tctip',
    'guide',
    'store',
    'resource',

]

# 自定义用户model
AUTH_USER_MODEL = 'oauth.Ouser'

# allauth配置
AUTHENTICATION_BACKENDS = (
    # Needed to login by username in Django admin, regardless of `allauth`
    'django.contrib.auth.backends.ModelBackend',

    # `allauth` specific authentication methods, such as login by e-mail
    'allauth.account.auth_backends.AuthenticationBackend',
)

# allauth需要的配置
# 当出现"SocialApp matching query does not exist"这种报错的时候就需要更换这个ID
SITE_ID = 2

# 设置登录和注册成功后重定向的页面，默认是/accounts/profile/
LOGIN_REDIRECT_URL = "/"

# Email setting
# 注册中邮件验证方法:“强制（mandatory）”,“可选（optional）【默认】”或“否（none）”之一。
# 开启邮箱验证的话，如果邮箱配置不可用会报错，所以默认关闭，根据需要自行开启
ACCOUNT_EMAIL_VERIFICATION = os.getenv('QTECHCODE_ACCOUNT_EMAIL_VERIFICATION', 'none')
# 登录方式，选择用户名或者邮箱都能登录
ACCOUNT_AUTHENTICATION_METHOD = "username_email"
# 设置用户注册的时候必须填写邮箱地址
ACCOUNT_EMAIL_REQUIRED = True
# 登出直接退出，不用确认
ACCOUNT_LOGOUT_ON_GET = True

# 表单插件的配置
CRISPY_TEMPLATE_PACK = 'bootstrap4'

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'qtechcode.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [os.path.join(BASE_DIR, 'templates')],  # 设置视图
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
                'django.template.context_processors.media',
                'blog.context_processors.settings_info',  # 自定义上下文管理器
            ],
        },
    },
]

WSGI_APPLICATION = 'qtechcode.wsgi.application'

# Database
# https://docs.djangoproject.com/en/1.10/ref/settings/#databases

# Password validation
# https://docs.djangoproject.com/en/1.10/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]

# Internationalization
# https://docs.djangoproject.com/en/1.10/topics/i18n/

LANGUAGE_CODE = 'zh-hans'

TIME_ZONE = 'Asia/Shanghai'

USE_I18N = True

USE_L10N = True

USE_TZ = False  # 关闭国际时间，不然数据库报错

DJANGO_CELERY_BEAT_TZ_AWARE = False

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/1.10/howto/static-files/

# 静态文件收集
STATIC_URL = '/static/'
if DEBUG:
    STATIC_ROOT = os.path.join(BASE_DIR, 'static')
else:
    STATIC_ROOT = 'static'

# 媒体文件收集
MEDIA_URL = '/media/'
MEDIA_ROOT = os.path.join(BASE_DIR, 'media')

#if DEBUG:
#    MEDIA_ROOT = os.path.join(BASE_DIR, 'media')
#else:
#    MEDIA_ROOT = 'media'

# 统一分页设置
BASE_PAGE_BY = 10
BASE_ORPHANS = 5

# 全文搜索应用配置
HAYSTACK_CONNECTIONS = {
    'default': {
        'ENGINE': 'blog.whoosh_cn_backend.WhooshEngine',  # 选择语言解析器为自己更换的结巴分词
        'PATH': os.path.join(BASE_DIR, 'whoosh_index'),  # 保存索引文件的地址，选择主目录下，这个会自动生成
    }
}
HAYSTACK_SIGNAL_PROCESSOR = 'haystack.signals.RealtimeSignalProcessor'

# restframework settings
REST_FRAMEWORK = {
    'DEFAULT_PERMISSION_CLASSES': (
        'rest_framework.permissions.AllowAny',
    ),
    'DEFAULT_PAGINATION_CLASS': 'rest_framework.pagination.LimitOffsetPagination',
    'PAGE_SIZE': 10
}

# 配置数据库
MYSQL_HOST = os.getenv('QTECHCODE_MYSQL_HOST', '127.0.0.1')
MYSQL_NAME = os.getenv('QTECHCODE_MYSQL_NAME', 'qtechcode')
MYSQL_USER = os.getenv('QTECHCODE_MYSQL_USER', 'admin')
MYSQL_PASSWORD = os.getenv('QTECHCODE_MYSQL_PASSWORD', '12345678')
MYSQL_PORT = os.getenv('QTECHCODE_MYSQL_PORT', 3306)

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.mysql',  # 修改数据库为MySQL，并进行配置
        'NAME': MYSQL_NAME,  # 数据库的名称
        'USER': MYSQL_USER,  # 数据库的用户名
        'PASSWORD': MYSQL_PASSWORD,  # 数据库的密码
        'HOST': MYSQL_HOST,
        'PORT': MYSQL_PORT,
        'OPTIONS': {'charset': 'utf8mb4'}
    }
}

# 使用django-redis缓存页面，缓存配置如下：
REDIS_HOST = os.getenv('QTECHCODE_REDIS_HOST', '127.0.0.1')
REDIS_PORT = os.getenv('QTECHCODE_REDIS_PORT', 6379)
#REDIS_PASSWORD = os.getenv('QTECHCODE_REDIS_PASSWORD', '12345678')

CACHES = {
    "default": {
        "BACKEND": "django_redis.cache.RedisCache",
        "LOCATION": "redis://{}:{}".format(REDIS_HOST, REDIS_PORT),
        "OPTIONS": {
            "CLIENT_CLASS": "django_redis.client.DefaultClient",
            #"PASSWORD": REDIS_PASSWORD
        }
    }
}

# 配置管理邮箱，服务出现故障会收到到邮件，环境变量值的格式：name|test@test.com 多组用户用英文逗号隔开
ADMINS = []
admin_email_user = os.getenv('QTECHCODE_ADMIN_EMAIL_USER', "admin|admin@example.com")
if admin_email_user:
    for each in admin_email_user.split(','):
        a_user, a_email = each.split('|')
        ADMINS.append((a_user, a_email))

# 邮箱配置
EMAIL_HOST = os.getenv('QTECHCODE_EMAIL_HOST', 'smtp.example.com')
EMAIL_HOST_USER = os.getenv('QTECHCODE_EMAIL_HOST_USER', 'admin@example.com')
EMAIL_HOST_PASSWORD = os.getenv('QTECHCODE_EMAIL_HOST_PASSWORD', '12345678')  # 这个不是邮箱密码，而是授权码
EMAIL_PORT = os.getenv('QTECHCODE_EMAIL_PORT', 465)  # 由于阿里云的25端口打不开，所以必须使用SSL然后改用465端口
EMAIL_TIMEOUT = 5
# 是否使用了SSL 或者TLS，为了用465端口，要使用这个
EMAIL_USE_SSL = os.getenv('QTECHCODE_EMAIL_USE_SSL', 'True').upper() == 'TRUE'
# 默认发件人，不设置的话django默认使用的webmaster@localhost，所以要设置成自己可用的邮箱
DEFAULT_FROM_EMAIL = os.getenv('QTECHCODE_DEFAULT_FROM_EMAIL', 'admin@example.com')

# 网站默认设置和上下文信息
SITE_LOGO_NAME = os.getenv('QTECHCODE_LOGO_NAME', 'QTechCode')
SITE_END_TITLE = os.getenv('QTECHCODE_SITE_END_TITLE', 'Quanfita')
SITE_DESCRIPTION = os.getenv('QTECHCODE_SITE_DESCRIPTION', 'QTechCode是一个基于QTECHCODE搭建的专业Python技能分享平台，分享包含Python基础知识、机器学习、神经网络算法、Web技术、信息安全技术、爬虫技术、图像处理技术等诸多内容。')
SITE_KEYWORDS = os.getenv('QTECHCODE_SITE_KEYWORDS', 'QTechCode,Django博客,个人博客,Quanfita,Python学习,Python分享,技术分享')

# 个性化设置，非必要信息
# 个人 Github 地址
MY_GITHUB = os.getenv('QTECHCODE_GITHUB', 'https://github.com/Quanfita')
MY_CSDN = os.getenv('QTECHCODE_CSDN', 'https://blog.csdn.net/qq_30611601')
# 工信部备案信息
BEIAN = os.getenv('QTECHCODE_BEIAN', 'ICP备案查询')
# 站长统计（友盟）
CNZZ_PROTOCOL = os.getenv('QTECHCODE_CNZZ_PROTOCOL', '')
# 站长推送
MY_SITE_VERIFICATION = os.getenv('QTECHCODE_SITE_VERIFICATION', '')
# 使用 http 还是 https （sitemap 中的链接可以体现出来）
OTOCOL_HTTPS = os.getenv('QTECHCODE_PROTOCOL_HTTPS', 'HTTP').lower()
# hao.QTechCode.com
HAO_CONSOLE = {
    'flag': os.getenv('QTECHCODE_HAO_FLAG', 'True').upper() == 'TRUE',
    'name': os.getenv('QTECHCODE_HAO_NAME', '聚合导航'),
    'url': os.getenv('QTECHCODE_HAO_URL', '/guide/')
}


SITE_NAME='聚合导航  -  基于KIM的导航页面'
SITE_DESC='精雕细琢每一像素、只为让您拥有一个体面的浏览器主页。除此之外，再无其他。'
SITE_KEYWORD='Google搜索,国外网站,国外网址,国外购物,国外视频,国外新闻,国外设计网站,国外网址导航,网站大全,网址导航,元搜索,多引擎搜索,效率工具,浏览器主页,聚合搜索'

# 醒目公告
NOTICE_FLAG = os.getenv('QTECHCODE_NOTICE_FLAG', 'True').upper() == 'TRUE'
NOTICE_CONTENT = "注意：本站将于今日进行版本更新，可能会出现网络不稳定、页面短时间无法访问等情况，感谢您对本站的支持，给您带来不变望请谅解~！"

